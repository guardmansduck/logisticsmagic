name: Build unsigned .ipa from raw Swift files

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install xcodeproj gem
        run: gem install xcodeproj

      - name: Generate minimal Xcode project
        run: |
          set -euo pipefail
          PROJECT_NAME="MyApp"
          mkdir -p "$PROJECT_NAME"
          cd "$PROJECT_NAME"

          ruby -e "
            require 'xcodeproj'

            # Create new project
            project = Xcodeproj::Project.new('${PROJECT_NAME}.xcodeproj')

            # Create app target
            target = project.new_target(:application, '${PROJECT_NAME}', :ios, '17.0')

            # Ensure Info.plist directory exists
            Dir.mkdir('${PROJECT_NAME}') unless Dir.exist?('${PROJECT_NAME}')

            # Create minimal Info.plist
            plist_path = '${PROJECT_NAME}/Info.plist'
            File.write(plist_path, <<~PLIST
              <?xml version='1.0' encoding='UTF-8'?>
              <!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>
              <plist version='1.0'>
              <dict>
                <key>CFBundleName</key><string>${PROJECT_NAME}</string>
                <key>CFBundleIdentifier</key><string>com.example.${PROJECT_NAME}</string>
                <key>CFBundleVersion</key><string>1</string>
                <key>CFBundleShortVersionString</key><string>1.0</string>
                <key>UILaunchStoryboardName</key><string>LaunchScreen</string>
                <key>UIApplicationSceneManifest</key>
                <dict>
                  <key>UIApplicationSupportsMultipleScenes</key><false/>
                  <key>UISceneConfigurations</key><dict>
                    <key>UIWindowSceneSessionRoleApplication</key><array/>
                  </dict>
                </dict>
              </dict>
              </plist>
            PLIST
            )

            # Add all .swift files from repo root to project
            main_group = project.main_group
            Dir.glob('../*.swift').each do |f|
              file_ref = main_group.new_file(f)
              target.add_file_references([file_ref])
            end

            # Save project
            project.save
          "
          cd ..

      - name: Build .app unsigned
        run: |
          set -euo pipefail
          PROJECT_NAME="MyApp"
          BUILD_DIR="$(pwd)/build"
          xcodebuild -project "${PROJECT_NAME}/${PROJECT_NAME}.xcodeproj" \
                     -scheme "${PROJECT_NAME}" \
                     -configuration Release \
                     -sdk iphoneos \
                     BUILD_DIR="$BUILD_DIR" \
                     clean build \
                     CODE_SIGNING_ALLOWED=NO \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO

      - name: Locate .app
        id: find_app
        run: |
          APP_PATH=$(find "$(pwd)/build" -type d -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "::error ::.app not found"
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> "$GITHUB_OUTPUT"

      - name: Package unsigned .ipa
        run: |
          APP_PATH="${{ steps.find_app.outputs.APP_PATH }}"
          IPA_NAME="UnsignedApp.ipa"
          TMPDIR=$(mktemp -d)
          mkdir -p "$TMPDIR/Payload"
          cp -a "$APP_PATH" "$TMPDIR/Payload/"
          (cd "$TMPDIR" && zip -qry "$IPA_NAME" Payload)
          mkdir -p artifacts
          mv "$TMPDIR/$IPA_NAME" artifacts/
          echo "IPA ready at artifacts/$IPA_NAME"

      - name: Upload unsigned .ipa artifact
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-ipa
          path: artifacts/*.ipa
